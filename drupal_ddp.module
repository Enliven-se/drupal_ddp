<?php

/**
 * @file
 * Support module for Drupal DDP.
 */

/**
 * Implements hook_menu().
 */
function drupal_ddp_menu() {
  $items['admin/config/development/ddp-connect'] = array(
    'title' => 'Drupal DDP Settings',
    'description' => 'Settings related to Drupal DDP module.',
    'page callback' => 'drupal_get_form',
    'page arguments'  => array('_drupal_ddp_form'),
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function drupal_ddp_permission() {
  return array(
    'access drupal ddp' => array(
      'title' => t('Access Drupal DDP Settings'),
      'description' => t('Allow users to access Drupal DDP Settings'),
    ),
  );
}

/**
 * Settings form for Drupal DDP module
 */
function _drupal_ddp_form() {
  $form = array();
  $form['drupal_ddp_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Drupal DDP Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['drupal_ddp_settings']['drupal_ddp_settings_meteor_socket'] = array(
    '#type' => 'textfield',
    '#title' => t('SockJS path for Meteor application'),
    '#default_value' => variable_get('drupal_ddp_settings_meteor_socket', 'http://localhost:3000/sockjs'),
    '#description' => t('Enter the /sockjs address of your Meteor application. This is usually the URL to your Meteor application followed by /sockjs.'),
  );

  $content_types = node_type_get_types();
  $use_with_ddp = $types = array();

  foreach ($content_types as $key => $type) {
    $types[$key] = t($type->name);

    // Gather up which content types should insert and update Meteor.
    if (variable_get('drupal_ddp_enabled_' . $key, 0) == 1) {
      $use_with_ddp[] = $key;
    }
  }

  $form['drupal_ddp_settings']['drupal_ddp_settings_enabled_types'] = array(
    '#title' => t('Content Types'),
    '#type' => 'checkboxes',
    '#description' => t('Select the content types to use with Drupal DDP.'),
    '#options' => $types,
    '#default_value' => $use_with_ddp,
  );
  $form['#submit'][] = '_drupal_ddp_settings_submit';

  return system_settings_form($form);
}

/**
 * Custom submit handler for _drupal_ddp_form
 */
function _drupal_ddp_settings_submit($form, &$form_state) {
  $use_with_ddp = $form_state['input']['drupal_ddp_settings_enabled_types'];

  // If Content type is check to be used with Drupal DDP,
  // set the correct variable value
  foreach ($use_with_ddp as $key => $val) {
    if (isset($val)) {
      variable_set('drupal_ddp_enabled_' . $key, 1);
    }
    else {
      variable_set('drupal_ddp_enabled_' . $key, 0);
    }
  }
}

/**
 * Implements hook_node_save().
 */
function drupal_ddp_node_presave($node) {
  $content_types = node_type_get_types();
  $use_with_ddp = array();

  // If Drupal DDP is enabled for a content type, save that content type to an i
  // array.
  foreach ($content_types as $key => $type) {
    if (variable_get('drupal_ddp_enabled_' . $key, 0) == 1) {
      $use_with_ddp[] = $key;
    }
  }

  // Send post data to our ddp node server.
  if (in_array($node->type, $use_with_ddp)) {
    $ddp_client_url = variable_get('drupal_ddp_settings_meteor_socket', 'http://localhost:3000/sockjs');

    // Collect Post data.
    $data = '{"node":' . json_encode($node) . '}';

    $options = array(
      'method' => 'POST',
      'data' => $data,
      'headers' => array('Content-Type' => 'application/json; charset=UTF-8'),
    );
    $result = drupal_http_request($ddp_client_url, $options);
  }
}


/**
 * Implements hook_form_alter().
 *
 * Adds custom fieldset to the node form, and attach ajax behaviour for vertical
 * panels to update the settings description.
 *
 * @see drupal_ddp.js
 */
function drupal_ddp_form_node_type_form_alter(&$form, $form_state) {
  // Only include on node add/edit forms.
  if (isset($form['type'])) {

    // Create a fieldset that will be included in the vertical tab.
    $form['drupal_ddp'] = array(
      '#type' => 'fieldset',
      '#title' => t('Drupal DDP'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      // The #group value must match the name of the vertical tabs element.
      // In most cases, this is 'additional_settings'.
      '#group' => 'additional_settings',
      '#attributes' => array(
        'class' => array('drupal-ddp-node-type-settings-form'),
      ),
      // Vertical tabs provide its most usable appearance when they are used to
      // include a summary of the information contained in the fieldset. To do
      // this, we attach additional JavaScript to handle changing the summary
      // when form settings are changed.
      '#attached' => array(
        'js' => array(
          'vertical-tabs' => drupal_get_path('module', 'drupal_ddp') . '/drupal_ddp.js',
        ),
      ),
    );

    // The form elements below provide a demonstration of how a fieldset
    // summary can be displayed in a collapsed tab.
    //
    // This checkbox is used to show or hide the custom settings form using
    // javascript (altering states of a container defined later).

    $form['drupal_ddp']['drupal_ddp_enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use this content type with Drupal DDP'),
      '#default_value' => variable_get('drupal_ddp_enabled_' . $form['#node_type']->type, 0),
    );
  }
}

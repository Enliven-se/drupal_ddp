<?php
/**
 * @file
 * Drupal DDP Module configuration and settings.
 */

/**
 * Implements hook_menu().
 */
function drupal_ddp_menu() {
  $items['admin/config/development/ddp-connect'] = array(
    'title' => 'Drupal DDP Settings',
    'description' => 'Settings related to Drupal DDP module.',
    'page callback' => 'drupal_get_form',
    'page arguments'  => array('_drupal_ddp_form'),
    'file' => 'ddp_batch_sync_content.inc',
    'file path' => drupal_get_path('module', 'drupal_ddp') . '/includes',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function drupal_ddp_permission() {
  return array(
    'access drupal ddp' => array(
      'title' => t('Access Drupal DDP Settings'),
      'description' => t('Allow users to access Drupal DDP Settings'),
    ),
  );
}

/**
 * Settings form for Drupal DDP module.
 */
function _drupal_ddp_form() {
  $form = array();
  $form['drupal_ddp_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Drupal DDP Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['drupal_ddp_settings']['drupal_ddp_settings_ddp_server_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Drupal DDP node server URL'),
    '#default_value' => variable_get('drupal_ddp_settings_ddp_server_url', 'http://localhost:8080'),
    '#description' => t('Enter the full URL to access your Drupal DDP node sever (ddp.js)'),
  );
  $form['drupal_ddp_settings']['drupal_ddp_settings_meteor_host_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Meteor app URL'),
    '#default_value' => variable_get('drupal_ddp_settings_meteor_host_url', 'http://localhost:3000'),
    '#description' => t('Enter the full URL to access your Meteor application, including port number.'),
  );


  $content_types = node_type_get_types();
  $use_with_ddp = $types = array();

  foreach ($content_types as $key => $type) {
    $types[$key] = $type->name;

    // Gather up which content types should insert and update Meteor.
    if (variable_get('drupal_ddp_enabled_' . $key, 0) == 1) {
      $use_with_ddp[] = $key;
    }
  }

  $form['drupal_ddp_settings']['drupal_ddp_settings_enabled_types'] = array(
    '#title' => t('Content Types'),
    '#type' => 'checkboxes',
    '#description' => t('Select the content types to use with Drupal DDP.'),
    '#options' => $types,
    '#default_value' => $use_with_ddp,
  );

  $form['drupal_ddp_settings']['sync'] = array(
    '#type' => 'fieldset',
    '#title' => t('Sync existing content with Meteor'),
    '#description' => t('Push existing data over to Meteor. Make sure that the DDP server & your Meteor app are running.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['drupal_ddp_settings']['sync']['content_type'] = array(
    '#title' => t('Sync a Content Type'),
    '#type' => 'radios',
    '#options' => $types,
    '#default_value' => $use_with_ddp,
  );
  $form['drupal_ddp_settings']['sync']['nodes'] = array(
    '#type' => 'submit', 
    '#value' => t('Sync Nodes'), 
    '#submit' => array('drupal_ddp_sync_existing_nodes'),
  );

  $form['#submit'][] = '_drupal_ddp_settings_submit';

  return system_settings_form($form);
}

/**
 * Custom submit handler for _drupal_ddp_form.
 */
function _drupal_ddp_settings_submit($form, &$form_state) {
  $use_with_ddp = $form_state['values']['drupal_ddp_settings_enabled_types'];

  // If Content type is check to be used with Drupal DDP,
  // set the correct variable value.
  foreach ($use_with_ddp as $key => $val) {
    if (isset($val)) {
      variable_set('drupal_ddp_enabled_' . $key, 1);
    }
    else {
      variable_set('drupal_ddp_enabled_' . $key, 0);
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function drupal_ddp_entity_insert($entity, $type) {
  switch ($type) {
    case 'node':
      // Set the ddp_type to 'node'.
      $entity->ddp_type = 'node';
      // Send post data to our ddp node server.
      if (drupal_ddp_use_with_ddp($entity->type)) { drupal_ddp_send_content($entity); }
      break;
    case 'taxonomy_term':
      // Set the ddp_type to 'taxonomy' and
      // also set 'is_new' to TRUE since taxonomies
      // don't include that flag on insert.
      $entity->ddp_type = 'taxonomy';
      $entity->is_new = TRUE;
      drupal_ddp_send_content($entity);
      break;
  }
}

/**
 * Implements hook_entity_update().
 */
function drupal_ddp_entity_update($entity, $type) {
  switch ($type) {
    case 'node':
      // Set the ddp_type to 'node'.
      $entity->ddp_type = 'node';
      // Send post data to our ddp node server.
      if (drupal_ddp_use_with_ddp($entity->type)) { drupal_ddp_send_content($entity); }
      break;
    case 'taxonomy_term':
      // Set the ddp_type to 'taxonomy'.
      $entity->ddp_type = 'taxonomy';
      drupal_ddp_send_content($entity);
      break;
  }
}

/**
 * Implements hook_entity_delete().
 */
function drupal_ddp_entity_delete($entity, $type) {
  // Set 'delete_content' flag to be used in Meteor.
  $entity->delete_content = TRUE;

  switch ($type) {
    case 'node':
      // Set the ddp_type to 'node'.
      $entity->ddp_type = 'node';
      // Send post data to our ddp node server.
      if (drupal_ddp_use_with_ddp($entity->type)) { drupal_ddp_send_content($entity); }
      break;
    case 'taxonomy_term':
      // Set the ddp_type to 'taxonomy'.
      $entity->ddp_type = 'taxonomy';
      drupal_ddp_send_content($entity);
      break;
  }
}

/**
 * Checks if content type is set to be used with Drupal DDP.
 *
 * @param $content_type
 *  String value of content type.
 * @return
 *  Returns TRUE if the $content_type can be
 *  used with drupal_ddp
 */
function drupal_ddp_use_with_ddp($content_type) {
  $content_types = node_type_get_types();
  $use_with_ddp = array();

  // If Drupal DDP is enabled for a content type, save that content type to an
  // array.
  foreach ($content_types as $key => $type) {
    if (variable_get('drupal_ddp_enabled_' . $key, 0) == 1) {
      $use_with_ddp[] = $key;
    }
  }

  return in_array($content_type, $use_with_ddp) ? TRUE : FALSE;
}


/**
 * Enables a node to be sent to node server.
 *
 * @param $content
 *  An entity object.
 */
function drupal_ddp_send_content($content) {
  $ddp_client_url = variable_get('drupal_ddp_settings_ddp_server_url', 'http://localhost:8080');
  
  if ($content->ddp_type == 'node') {
    // Load the node.
    // This gets around an issue of cached data
    // being returned by restws
    entity_get_controller('node')->resetCache(array($content->nid));

    // Get json from restws
    $format = restws_format('json');
    $name = 'node';
    $id = $content->nid;
    $op = 'view';

    $json_string = drupal_ddp_handle_request($op, $format, $name, $id);
    $node = json_decode($json_string['string']);

    // Set ddp_type = node
    $node->ddp_type = 'node';

    // If node is new, set is_new to TRUE
    // on the loaded node.
    if (isset($content->is_new) && ($content->is_new)) {
      $node->is_new = TRUE;
    }

    // If node has been deleted, set delete_node to TRUE.
    if (isset($content->delete_content) && ($content->delete_content)) {
      $node->delete_content = TRUE;
    }

    $content = $node;
  }

  // Create json document with data.
  $data = '{"content":' . json_encode($content) . '}';

  $options = array(
    'method' => 'POST',
    'data' => $data,
    'headers' => array('Content-Type' => 'application/json; charset=UTF-8'),
  );
  drupal_http_request($ddp_client_url, $options);
}

/**
 * Implements hook_form_alter().
 *
 * Adds custom fieldset to the node form, and attach ajax behaviour for vertical
 * panels to update the settings description.
 *
 * @see drupal_ddp.js
 */
function drupal_ddp_form_node_type_form_alter(&$form, $form_state) {
  // Only include on node add/edit forms.
  if (isset($form['type'])) {

    // Create a fieldset that will be included in the vertical tab.
    $form['drupal_ddp'] = array(
      '#type' => 'fieldset',
      '#title' => t('Drupal DDP'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      // The #group value must match the name of the vertical tabs element.
      // In most cases, this is 'additional_settings'.
      '#group' => 'additional_settings',
      '#attributes' => array(
        'class' => array('drupal-ddp-node-type-settings-form'),
      ),
      // Vertical tabs provide its most usable appearance when they are used to
      // include a summary of the information contained in the fieldset. To do
      // this, we attach additional JavaScript to handle changing the summary
      // when form settings are changed.
      '#attached' => array(
        'js' => array(
          'vertical-tabs' => drupal_get_path('module', 'drupal_ddp') . '/drupal_ddp.js',
        ),
      ),
    );

    // The form elements below provide a demonstration of how a fieldset
    // summary can be displayed in a collapsed tab.
    //
    // This checkbox is used to show or hide the custom settings form using
    // javascript (altering states of a container defined later).
    $form['drupal_ddp']['drupal_ddp_enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use this content type with Drupal DDP'),
      '#default_value' => variable_get('drupal_ddp_enabled_' . $form['#node_type']->type, 0),
    );
  }
}


/**
 * Handles a request and returns it as a variable instead of printing it.
 * Modified from restws_handle_request() in restws.module
 *
 * @param string $op
 *   One of 'create', 'update', 'delete' or 'view'.
 */
function drupal_ddp_handle_request($op, $format, $resource_name, $id = NULL, $payload = NULL) {
  if ($resource = restws_resource_controller($resource_name)) {
    // Allow other modules to change the web service request or react upon it.
    $request = array(
      'op' => &$op,
      'format' => &$format,
      'resource' => &$resource,
      'id' => &$id,
      'payload' => &$payload,
    );
    drupal_alter('restws_request', $request);

    // Since there is no access callback for query we need to use view.
    $access_op = $op == 'query' ? 'view' : $op;
    $return = array();
    if (user_access('access resource ' . $resource_name) && $resource->access($access_op, $id)) {
      try {
        $method = $op . 'Resource';
        if ($op == 'create') {
          $return['string'] = $format->$method($resource, $payload);
          $return['header'] = array('Status', '201 Created');
        }
        elseif ($op == 'query') {
          if (!$resource instanceof RestWSQueryResourceControllerInterface) {
            throw new RestWSException('Quering not available for this resources', 501);
          }
          $return['string'] = $format->$method($resource, $payload);
        }
        else {
           $return['string'] = $format->$method($resource, $id, $payload);
        }
        $return ['header'] = array('Content-Type', $format->mimeType());
      }
      catch (RestWSException $e) {
        $return['errors'] = check_plain($e->getHTTPError()) . ': ' . check_plain($e->getMessage());
        $return['header'] = array('Status', $e->getHTTPError());
      }
    }
    else {
      $return['string'] = '403 Forbidden';
      $return['header'] = array('Status', '403 Forbidden');
      watchdog('access denied', check_plain($_GET['q']), NULL, WATCHDOG_WARNING);
    }
    return $return;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_restws_response_alter().
 *
 * Alter the outgoing response.
 *
 * @param mixed $response
 *   The response data being returned by the REST service (not yet serialized).
 * @param string $function
 *   The function being called on the REST service.
 * @param string $format_name
 *   The name of the format serializing the response.
 *
 * related issue https://drupal.org/node/2024603
 */
function drupal_ddp_restws_response_alter(&$response, $function, $format_name, $resourceController) {
  // specific modifications based common request type
  if (($function == 'viewResource' || $function == 'queryResource') && $format_name == 'json') {
    // query response is nested, direct access is not
    if ($function == 'queryResource') {
      foreach ($response['list'] as &$object) {
        drupal_ddp_restws_deep_load($object);
      }
    }
    else {
      drupal_ddp_restws_deep_load($response);
    }
  }
}

/**
 * Callback to perform deep load on a base entity.
 *
 * We're performing a deep-reference-load on referenced
 * files and taxonomy fields in order to get the data for
 * those fields rather than a resource callback.
 *
 * @param $response
 *   response about to be sent back for the RestWS query
 * @return NULL
 *   this will load additional items into the response, filtering their
 *   fields based on account access to the deep loaded items.
 */
function drupal_ddp_restws_deep_load(&$response) {
  // build list of allowed entity types to deep pull down
  $allowed = array('taxonomy_term', 'file');
  // $allowed = array();

  // allow for deep loading of resources
  foreach ($response as $key => &$val) {
    // check for a single resource verses many
    if (is_array($val) && isset($val[0]['id'])) {
      // loop through items loading them in
      foreach ($val as &$item) {
        if (in_array($item['resource'], $allowed)) {
          // load the entity
          $entity = entity_load_single($item['resource'], $item['id']);
          // ensure they can view this specific item
          if (entity_access('view', $item['resource'], $entity)) {
            // create a meta wrapper to act on for entity
            $wrapper = entity_metadata_wrapper($item['resource'], $entity);
            // filter out these values
            $wrap = restws_property_access_filter($wrapper);
            $eary = (array) $entity;
            foreach ($eary as $property => $value) {
              // value needs to be removed as it didn't pass wrapper validation
              if (!isset($wrap[$property])) {
                unset($eary[$property]);
              }
            }
            // add values based on wrapper passing correctly
            $item = $eary;
          }
        }
      }
    }
    // Has a file reference
    elseif (is_array($val) && isset($val[0]['file'])) {
      // Loop through items loading them in.
      foreach ($val as &$item) {
        if (in_array($item['file']['resource'], $allowed)) {
          // Load the entity
          $entity = entity_load_single($item['file']['resource'], $item['file']['id']);
          $file_url = file_create_url($entity->uri);
          
          // Ensure they can view this specific item.
          if (entity_access('view', $item['file']['resource'], $entity)) {
            // Create a meta wrapper to act on for entity.
            $wrapper = entity_metadata_wrapper($item['file']['resource'], $entity);
            // Filter out these values.
            $wrap = restws_property_access_filter($wrapper);

            $eary = (array) $entity;
            foreach ($eary as $property => $value) {
              // value needs to be removed as it didn't pass wrapper validation
              if (!isset($wrap[$property])) {
                unset($eary[$property]);
              }
            }
            // Add file URL to resource.
            $eary['url'] = $file_url;
            // Add values based on wrapper passing correctly.
            $item['file'] = $eary;
          }
        }
      }
    }
    elseif (is_array($val) && isset($val['id'])) {
      if (in_array($val['resource'], $allowed)) {
        // load the entity
        $entity = entity_load_single($val['resource'], $val['id']);
        // ensure they can view this specific item
        if (entity_access('view', $val['resource'], $entity)) {
          // create a meta wrapper to act on for entity
          $wrapper = entity_metadata_wrapper($val['resource'], $entity);
          // filter out fields
          $wrap = restws_property_access_filter($wrapper);
          // typecast entity as array for property evaluation
          $eary = (array) $entity;
          foreach ($eary as $property => $value) {
            // value needs to be removed as it didn't pass wrapper validation
            if (!isset($wrap[$property])) {
              unset($eary[$property]);
            }
          }
          // add values based on wrapper passing correctly
          $val = $eary;
        }
      }
    }
  }
}

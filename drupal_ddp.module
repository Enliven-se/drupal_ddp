<?php

/**
 * @file
 * Drupal DDP Module configuration and settings.
 */

/**
 * Implements hook_menu().
 */
function drupal_ddp_menu() {
  $items['admin/config/development/ddp-connect'] = array(
    'title' => 'Drupal DDP Settings',
    'description' => 'Settings related to Drupal DDP module.',
    'page callback' => 'drupal_get_form',
    'page arguments'  => array('_drupal_ddp_form'),
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function drupal_ddp_permission() {
  return array(
    'access drupal ddp' => array(
      'title' => t('Access Drupal DDP Settings'),
      'description' => t('Allow users to access Drupal DDP Settings'),
    ),
  );
}

/**
 * Settings form for Drupal DDP module.
 */
function _drupal_ddp_form() {
  $form = array();
  $form['drupal_ddp_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Drupal DDP Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['drupal_ddp_settings']['drupal_ddp_settings_ddp_server_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Drupal DDP node server URL'),
    '#default_value' => variable_get('drupal_ddp_settings_ddp_server_url', 'http://localhost:8080'),
    '#description' => t('Enter the full URL to access your Drupal DDP node sever (ddp.js)'),
  );
  $form['drupal_ddp_settings']['drupal_ddp_settings_meteor_host_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Meteor app URL'),
    '#default_value' => variable_get('drupal_ddp_settings_meteor_host_url', 'http://localhost:3000'),
    '#description' => t('Enter the full URL to access your Meteor application, including port number.'),
  );

  $content_types = node_type_get_types();
  $use_with_ddp = $types = array();

  foreach ($content_types as $key => $type) {
    $types[$key] = $type->name;

    // Gather up which content types should insert and update Meteor.
    if (variable_get('drupal_ddp_enabled_' . $key, 0) == 1) {
      $use_with_ddp[] = $key;
    }
  }

  $form['drupal_ddp_settings']['drupal_ddp_settings_enabled_types'] = array(
    '#title' => t('Content Types'),
    '#type' => 'checkboxes',
    '#description' => t('Select the content types to use with Drupal DDP.'),
    '#options' => $types,
    '#default_value' => $use_with_ddp,
  );
  $form['#submit'][] = '_drupal_ddp_settings_submit';

  return system_settings_form($form);
}

/**
 * Custom submit handler for _drupal_ddp_form.
 */
function _drupal_ddp_settings_submit($form, &$form_state) {
  $use_with_ddp = $form_state['values']['drupal_ddp_settings_enabled_types'];

  // If Content type is check to be used with Drupal DDP,
  // set the correct variable value.
  foreach ($use_with_ddp as $key => $val) {
    if (isset($val)) {
      variable_set('drupal_ddp_enabled_' . $key, 1);
    }
    else {
      variable_set('drupal_ddp_enabled_' . $key, 0);
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function drupal_ddp_node_insert($node) {
  // Set the ddp_type to 'node' for nodes.
  $node->ddp_type = 'node';

  // Send post data to our ddp node server.
  if (drupal_ddp_use_with_ddp($node->type)) {
    drupal_ddp_send_content($node);
  }
}

/**
 * Implements hook_node_update().
 */
function drupal_ddp_node_update($node) {
  // Set the ddp_type to 'node' for nodes.
  $node->ddp_type = 'node';

  // Send post data to our ddp node server.
  if (drupal_ddp_use_with_ddp($node->type)) {
    drupal_ddp_send_content($node);
  }
}

/**
 * Implements hook_node_delete().
 */
function drupal_ddp_node_delete($node) {
  // Set the ddp_type to 'node' for nodes.
  $node->ddp_type = 'node';

  // Set a flag to tell the meteor app to delete
  // this node.
  $node->delete_content = TRUE;

  // Send post data to our ddp node server.
  if (drupal_ddp_use_with_ddp($node->type)) {
    drupal_ddp_send_content($node);
  }
}

/**
 * Checks if content type is set to be used with Drupal DDP.
 *
 * @param string
    String value of content type.
 * @return bool
 */
function drupal_ddp_use_with_ddp($content_type) {
  $content_types = node_type_get_types();
  $use_with_ddp = array();

  // If Drupal DDP is enabled for a content type, save that content type to an
  // array.
  foreach ($content_types as $key => $type) {
    if (variable_get('drupal_ddp_enabled_' . $key, 0) == 1) {
      $use_with_ddp[] = $key;
    }
  }

  if (in_array($content_type, $use_with_ddp)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_taxonomy_term_insert().
 */
function drupal_ddp_taxonomy_term_insert($term) {
  $term->ddp_type = 'taxonomy';
  $term->is_new = TRUE;
  drupal_ddp_send_content($term);
}

/**
 * Implements hook_taxonomy_term_update().
 */
function drupal_ddp_taxonomy_term_update($term) {
  $term->ddp_type = 'taxonomy';
  $term->is_new = FALSE;
  drupal_ddp_send_content($term);
}

/**
 * Implements hook_taxonomy_term_delete().
 */
function drupal_ddp_taxonomy_term_delete($term) {
  $term->ddp_type = 'taxonomy';
  $term->is_new = FALSE;
  $term->delete_content = TRUE;
  drupal_ddp_send_content($term);
}

/**
 * Implements hook_user_insert().
 */
function drupal_ddp_user_insert(&$edit, $account, $category){
  $account->ddp_type = 'user';
  drupal_ddp_send_content($account);
}

/**
 * Enables a node to be sent to node server.
 */
function drupal_ddp_send_content($content) {
  $ddp_client_url = variable_get('drupal_ddp_settings_ddp_server_url', 'http://localhost:8080');
  
  if ($content->ddp_type == 'node') {
    // Load the node.
    // This gets around the issue of files not
    // having a uri during an insert.
    $node = node_load($content->nid, NULL, TRUE);

    // Set 'ddp_type' = 'node'
    $node->ddp_type = 'node';

    // If node is new, set is_new to TRUE
    // on the loaded node.
    if (isset($content->is_new) && ($content->is_new)) {
      $node->is_new = TRUE;
    }

    // If node has been deleted, set delete_node to TRUE.
    if (isset($content->delete_content) && ($content->delete_content)) {
      $node->delete_content = TRUE;
    }

    $content = $node;
  }

  // Create json document with data.
  $data = '{"content":' . json_encode($content) . '}';

  $options = array(
    'method' => 'POST',
    'data' => $data,
    'headers' => array('Content-Type' => 'application/json; charset=UTF-8'),
  );
  drupal_http_request($ddp_client_url, $options);
}

/**
 * Implements hook_form_alter().
 *
 * Adds custom fieldset to the node form, and attach ajax behaviour for vertical
 * panels to update the settings description.
 *
 * @see drupal_ddp.js
 */
function drupal_ddp_form_node_type_form_alter(&$form, $form_state) {
  // Only include on node add/edit forms.
  if (isset($form['type'])) {

    // Create a fieldset that will be included in the vertical tab.
    $form['drupal_ddp'] = array(
      '#type' => 'fieldset',
      '#title' => t('Drupal DDP'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      // The #group value must match the name of the vertical tabs element.
      // In most cases, this is 'additional_settings'.
      '#group' => 'additional_settings',
      '#attributes' => array(
        'class' => array('drupal-ddp-node-type-settings-form'),
      ),
      // Vertical tabs provide its most usable appearance when they are used to
      // include a summary of the information contained in the fieldset. To do
      // this, we attach additional JavaScript to handle changing the summary
      // when form settings are changed.
      '#attached' => array(
        'js' => array(
          'vertical-tabs' => drupal_get_path('module', 'drupal_ddp') . '/drupal_ddp.js',
        ),
      ),
    );

    // The form elements below provide a demonstration of how a fieldset
    // summary can be displayed in a collapsed tab.
    //
    // This checkbox is used to show or hide the custom settings form using
    // javascript (altering states of a container defined later).
    $form['drupal_ddp']['drupal_ddp_enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use this content type with Drupal DDP'),
      '#default_value' => variable_get('drupal_ddp_enabled_' . $form['#node_type']->type, 0),
    );
  }
}
